// commands.ts
import { sendMenu, sendMessage, sendMainButton, checkSubscription, getBotName } from "./api";
import { BotEnv } from "../env";
import menuItemsData from './menuItems.json';


const get_start_content = `
*üíº –ï—Å—Ç—å –±–∏–∑–Ω–µ—Å ‚Äî —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã!*  
*üõ†Ô∏è –ù–µ—Ç –±–∏–∑–Ω–µ—Å–∞ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –±–µ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤!*  
       
üéØ –†–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —ç–∫–æ–Ω–æ–º–∏—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:  
‚úÖ **–°—Ç–∞–Ω—å—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã "–°–≤–æ–π –≤ –±–∏–∑–Ω–µ—Å–µ | PRIVACY —Ä–∞–∑–≤–∏—Ç–∏–µ –∏–¥–µ–π –∏ –¥–µ–ª–∞".** üí∏  
üí° **–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∞–π—Ç –Ω–∞ CMS, –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–µ–∫–ª–∞–º–µ (–≤–æ–∑–º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ).**  
üîπ **–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π –ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram –∏ —Å–∞–π—Ç:**  
‚òÅÔ∏è –û–±–ª–∞—á–Ω–∞—è –∫–∞—Å—Å–∞ –æ—Ç 1.5% –∑–∞ –ø–ª–∞—Ç–µ–∂. 
    üìú –í—Å—ë –ø–æ 54-–§–ó. 
    üè¶ –ë–µ–∑ –∫–∞—Å—Å–æ–≤–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.  
üîπ **–û–±–ª–∞—á–Ω–∞—è 1–° –±–µ–∑ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã.**  
üîπ **–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:** —Å–∞–π—Ç + 1–° + —Ä–µ–∫–ª–∞–º–∞ –æ—Ç **5000 —Ä—É–±–ª–µ–π** –≤ –º–µ—Å—è—Ü.  
üîπ **–í–æ–∑–≤—Ä–∞—Ç –¥–æ 20 000 —Ä—É–±–ª–µ–π –Ω–∞ —Ä–µ–∫–ª–∞–º—É —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç!**  
üîπ ‚ú® **–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ...**

üí¨ –•–æ—Ç–∏—Ç–µ ‚Äî –±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ ‚Äî –Ω–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å **500 —Ä—É–±–ª–µ–π** –∑–∞ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∞ –º—ã –ø–æ–ª—É—á–∏–º **1000 —Ä—É–±–ª–µ–π** ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –±–æ–Ω—É—Å.  
‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ  
*–ù–∞—á–Ω–∏—Ç–µ –≤–∞—à –±–∏–∑–Ω–µ—Å ‚Äî —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏.* –†–µ–∫–ª–∞–º–∞ –∏ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É. –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥, –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å—Ç–∞–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. üòâ
`;

const get_first_content = `
üöÄ –í—ã–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –æ–Ω–ª–∞–π–Ω –≤—Å–µ–≥–æ –∑–∞ 3 –¥–Ω—è!

1Ô∏è‚É£ –í–∞—à –±–∏–∑–Ω–µ—Å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∑–∞ 3 –¥–Ω—è!
–ú—ã —Å–æ–∑–¥–∞–µ–º —Å–∞–π—Ç, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —á–∞—Ç-–±–æ—Ç–∞ –∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –≤–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥–ª–∏ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è.

2Ô∏è‚É£ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!
–†–µ–∫–ª–∞–º–∞ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤? –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–µ–∫—Å—Ç—ã –∏ –æ—Ñ—Ñ–µ—Ä—ã –ø—Ä—è–º–æ –≤ CMS ‚Äî –±–µ–∑ –ø–æ–º–æ—â–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!

3Ô∏è‚É£ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ª—é–±–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞!
E-commerce, —É—Å–ª—É–≥–∏, –∏–Ω—Ñ–æ–±–∏–∑–Ω–µ—Å, B2B ‚Äî —Å–∞–π—Ç –ª–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –ª—é–±—É—é –Ω–∏—à—É –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ñ—Ñ–µ—Ä—ã –Ω–∞ –ª–µ—Ç—É.

4Ô∏è‚É£ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏!
–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ò–ò –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ.

5Ô∏è‚É£ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–∏–±–∫–æ—Å—Ç—å ‚Äî —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –Ω–∞ —Ö–æ–¥—É!
–û–±–Ω–æ–≤–ª—è–π—Ç–µ –æ—Ñ—Ñ–µ—Ä—ã, —Ç–µ–∫—Å—Ç—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä—è–º–æ –≤–æ –≤—Ä–µ–º—è —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ ‚Äî –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ—Å—å –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º.

üí¨ –ù—É–∂–Ω–æ? –ë–µ—Ä–∏—Ç–µ. –ù–µ –Ω—É–∂–Ω–æ? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 500 —Ä—É–±–ª–µ–π –∑–∞ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∞ –º—ã ‚Äî 1000 —Ä—É–±–ª–µ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–æ–Ω—É—Å–∞.
‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –±–∏–∑–Ω–µ—Å ‚Äî —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —É—Å–ª—É–≥–∏. –í–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —Ä–µ–∫–ª–∞–º–∞ –∏ –ø—Ä–æ–¥–∞–∂–∏. –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–≥, –∏ –¥–æ—Ö–æ–¥ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏. üòâ

üõí [**–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å**](https://ox1c.ru/init-payment/yandex-direct-seo) ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å!
 `;


// Creating a callbackTexts object for quick access to texts
const callbackTexts = menuItemsData.menuItems.reduce(
  (acc: { [key: string]: { response_text: string; parse_mode?: "Markdown" | "HTML" | null } }, item) => {
    //@ts-ignore
    acc[item.callback_data] = { response_text: item.response_text, parse_mode: item.parse_mode || null };
    return acc;
  },
  {}
);

// Creating menu from JSON data
const menuContent = menuItemsData.menuItems.map(item => [{
    text: item.text,
    callback_data: item.callback_data
}]);

interface TelegramMessage {
    message?: {
        chat: { id: number };
        text: string;
        message_id: number;
        from: { id: number };
    };
    callback_query?: {
        data: string;
        from: { id: number };
    };
}

// User message handler
export const handleTelegramMessage = async (
    body: TelegramMessage,
    env: BotEnv
): Promise<Response> => {
    const BOT_TOKEN = env.TELEGRAM_BOT_TOKEN;
    const CHANNEL_CHAT_ID = env.CHANNEL_CHAT_ID;
    const LINK_SUBSCRIBED_CHANNEL = env.LINK_SUBSCRIBED_CHANNEL;
    const message = body.message;
    const callbackQuery = body.callback_query;

    let botName = "...";
    try {
        botName = await getBotName(BOT_TOKEN) || " ";
    } catch (error) {
        console.error("Error fetching bot name:", error);
    }
    const formattedBotName = botName.replace('_', '\\_');

    if (callbackQuery) {
        const chatId = callbackQuery.from.id;
        const callbackData = callbackQuery.data;

        // Subscription check
        const isSubscribed = await checkSubscription(chatId, BOT_TOKEN, CHANNEL_CHAT_ID);
        if (!isSubscribed) {
            await sendMessage(
                chatId,
                `‚ùå To use the bot, subscribe to the channel: ${LINK_SUBSCRIBED_CHANNEL}\n\nYour bot: ${botName}`,
                BOT_TOKEN
            );
            // Show 'Refresh' button at start
            const buttons = [
                [{ text: 'üîÑ Refresh', callback_data: 'update' }],
            ];

            await sendMenu(chatId, buttons, BOT_TOKEN);
            return new Response("User not subscribed");
        }

        // Handling button clicks
        if (callbackData === 'get_first_content') {
            // Show menu with buttons from JSON
            await sendMessage(
                chatId,
                `Hello! I am the bot üëâ **${formattedBotName}**.  
                ${get_first_content}
                `,
                BOT_TOKEN, "Markdown"
            ); 
        }
        if (callbackData === 'main_menu') {
            // Show menu with buttons from JSON
            await sendMenu(chatId, menuContent, BOT_TOKEN);
        } else if (callbackTexts[callbackData]) {
            // If it's a command from JSON
            const { response_text, parse_mode } = callbackTexts[callbackData];
            //@ts-ignore
            await sendMessage(chatId, response_text, BOT_TOKEN, parse_mode || null); // Use parse_mode from JSON
            // Show 'Main Menu' button after sending text
            await sendMainButton(chatId, BOT_TOKEN);
        } else if (callbackData === 'help') {
            await sendMessage(chatId, "Help:\n/start - start\n/help - help", BOT_TOKEN);
            await sendMainButton(chatId, BOT_TOKEN);
        } else if (callbackData === 'update') {
            await sendMessage(chatId, 'Data updated!', BOT_TOKEN);
            await sendMainButton(chatId, BOT_TOKEN);
        } else {
            await sendMessage(chatId, 'Unknown command.', BOT_TOKEN);
            await sendMainButton(chatId, BOT_TOKEN);
        }
    } else if (message) {
        const chatId = message.chat.id;

        if (message.text === '/start') {
            // Subscription check at start
            const isSubscribed = await checkSubscription(chatId, BOT_TOKEN, CHANNEL_CHAT_ID);

            await sendMessage(
                chatId,
                `Hello! I am the bot üëâ ${formattedBotName}.
                ${get_start_content}
               `,
                BOT_TOKEN, "Markdown"
            ); 
            
            if (!isSubscribed) {
                await sendMessage(
                    chatId,
                    `‚ùå To use the bot, subscribe to the channel: ${LINK_SUBSCRIBED_CHANNEL}`,
                    BOT_TOKEN
                );
                // Show 'Refresh' button at start
                const buttons = [
                    [{ text: 'üîÑ Refresh', callback_data: 'update' }],
                ];

                await sendMenu(chatId, buttons, BOT_TOKEN);
                
                return new Response('User not subscribed');
            }

            // Show only 'Main Menu' button upon successful subscription
            await sendMainButton(chatId, BOT_TOKEN);
        } else if (message.text === '/help') {
            // Handling /help command
            await sendMessage(chatId, "Help:\n/start - start\n/help - help", BOT_TOKEN);
            await sendMainButton(chatId, BOT_TOKEN);
        } else if (message.text === '/get_first_content') {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            const isSubscribed = await checkSubscription(chatId, BOT_TOKEN, CHANNEL_CHAT_ID);
            if (!isSubscribed) {
                await sendMessage(
                    chatId,
                    `‚ùå To use the bot, subscribe to the channel: ${LINK_SUBSCRIBED_CHANNEL}`,
                    BOT_TOKEN
                );
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å" –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                const buttons = [
                    [{ text: 'üîÑ Refresh', callback_data: 'update' }],
                ];
                await sendMenu(chatId, buttons, BOT_TOKEN);
                return new Response('User not subscribed');
            }
        
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å
            await sendMessage(
                chatId,
                `Hello! I am the bot üëâ **${formattedBotName}**.  
                ${get_first_content}
                `,
                BOT_TOKEN, "Markdown"
            ); 
        
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await sendMainButton(chatId, BOT_TOKEN);
        }        
        
        else {
            // Handling unknown commands
            await sendMessage(chatId, "‚ùì Unknown command. Help:\n/start - start\n/help - help", BOT_TOKEN);
        }
    }

    return new Response('OK');
};
